#!/usr/bin/env bash
# ============================================================
# INSTALADOR AUTOMATIZADO - PIZZARIA DEVOPS
# Instala e configura deploy automatizado do projeto pizzaria
# ============================================================

set -euo pipefail  # Fail fast: para em qualquer erro

# Configura√ß√µes
readonly INSTALL_DIR="/opt/pizzaria"
readonly REPO_URL="https://github.com/rgiovann/devs2blu_devops_projeto_pizzaria.git"
readonly BRANCH="main"
readonly WEB_PORT="8080"
readonly CHANGED_FILE="/tmp/pizzaria-changed"

# Cores para output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Fun√ß√£o de log com timestamp e cores
log() {
    local level=$1
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')

    case $level in
        "INFO")  echo -e "${BLUE}[INFO]${NC} [$timestamp] $message" ;;
        "WARN")  echo -e "${YELLOW}[WARN]${NC} [$timestamp] $message" ;;
        "ERROR") echo -e "${RED}[ERROR]${NC} [$timestamp] $message" ;;
        "SUCCESS") echo -e "${GREEN}[SUCCESS]${NC} [$timestamp] $message" ;;
    esac
}

# Verificar se est√° rodando como root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        log "ERROR" "Este script deve ser executado como root"
        log "INFO" "Execute: sudo $0"
        exit 1
    fi
    log "SUCCESS" "Executando como root"
}

# Instalar depend√™ncias do sistema
install_system_dependencies() {
    log "INFO" "Atualizando reposit√≥rios do sistema..."
    apt-get update -qq

    log "INFO" "Instalando depend√™ncias: docker.io, docker-compose, git, curl..."

    # Instalar pacotes essenciais
    DEBIAN_FRONTEND=noninteractive apt-get install -y -qq \
        docker.io \
        docker-compose \
        git \
        curl \
        ca-certificates \
        gnupg \
        lsb-release \
        util-linux \
        cron

    # Habilitar e iniciar Docker
    systemctl enable docker
    systemctl start docker

    # Habilitar cron
    systemctl enable cron
    systemctl start cron

    log "SUCCESS" "Depend√™ncias instaladas com sucesso"
}

# Verificar se Docker est√° funcionando
verify_docker() {
    log "INFO" "Verificando instala√ß√£o do Docker..."

    if ! docker --version >/dev/null 2>&1; then
        log "ERROR" "Docker n√£o est√° funcionando corretamente"
        exit 1
    fi

    if ! docker-compose --version >/dev/null 2>&1; then
        log "ERROR" "Docker Compose n√£o est√° funcionando corretamente"
        exit 1
    fi

    # Teste b√°sico do Docker
    if ! docker run --rm hello-world >/dev/null 2>&1; then
        log "ERROR" "Docker n√£o consegue executar containers"
        exit 1
    fi

    log "SUCCESS" "Docker configurado e funcionando"
}

# Criar estrutura de diret√≥rios
create_directory_structure() {
    log "INFO" "Criando estrutura de diret√≥rios em $INSTALL_DIR..."

    # Criar diret√≥rios necess√°rios
    mkdir -p "$INSTALL_DIR"/{scripts,logs,app}

    # Definir permiss√µes adequadas
    chmod 755 "$INSTALL_DIR"
    chmod 755 "$INSTALL_DIR/scripts"
    chmod 755 "$INSTALL_DIR/logs"

    log "SUCCESS" "Estrutura de diret√≥rios criada"
}

# Criar arquivo de configura√ß√£o
create_config_file() {
    log "INFO" "Criando arquivo de configura√ß√£o..."

    cat > "$INSTALL_DIR/.env" << EOF
# Configura√ß√µes do Deploy Automatizado - Pizzaria
REPO_URL=$REPO_URL
BRANCH=$BRANCH
APP_DIR=$INSTALL_DIR/app
WEB_PORT=$WEB_PORT
FORCE_REBUILD=false
INSTALL_DIR=$INSTALL_DIR
CHANGED_FILE=$CHANGED_FILE
EOF

    chmod 644 "$INSTALL_DIR/.env"
    log "SUCCESS" "Arquivo de configura√ß√£o criado em $INSTALL_DIR/.env"
}

# Criar script de deploy
create_deploy_script() {
    log "INFO" "Criando script de deploy automatizado..."

    cat > "$INSTALL_DIR/scripts/deploy.sh" << 'DEPLOY_SCRIPT_EOF'
#!/usr/bin/env bash
# Script de Deploy Automatizado - Pizzaria
set -euo pipefail

# Carregar configura√ß√µes
source /opt/pizzaria/.env

# Lock file para evitar execu√ß√µes simult√¢neas
LOCK_FILE="/tmp/pizzaria-deploy.lock"
LOG_FILE="$INSTALL_DIR/logs/deploy.log"

# Fun√ß√£o de log
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Limpeza do lock file
cleanup() {
    rm -f "$LOCK_FILE"
    log "Deploy finalizado - lock removido"
}
trap cleanup EXIT

# Verificar se j√° est√° executando
if [[ -f "$LOCK_FILE" ]]; then
    log "Deploy j√° em execu√ß√£o. Pulando..."
    exit 0
fi

# Criar lock
touch "$LOCK_FILE"
log "=== INICIANDO DEPLOY AUTOMATIZADO ==="

# Fun√ß√£o para clonar/atualizar reposit√≥rio
update_repository() {
    log "Verificando reposit√≥rio..."

    if [[ ! -d "$APP_DIR" ]] || [[ ! -d "$APP_DIR/.git" ]]; then
        log "Clonando reposit√≥rio pela primeira vez..."
        git clone -b "$BRANCH" "$REPO_URL" "$APP_DIR"
    else
        log "Atualizando reposit√≥rio existente..."
        cd "$APP_DIR"

        # Salvar hash atual
        OLD_HASH=$(git rev-parse HEAD 2>/dev/null || echo "none")

        # Fazer pull for√ßado (sobrescrever mudan√ßas locais)
        git fetch origin "$BRANCH"
        git reset --hard "origin/$BRANCH"
        git clean -fd

        # Verificar se houve mudan√ßas
        NEW_HASH=$(git rev-parse HEAD)

        if [[ "$OLD_HASH" != "$NEW_HASH" ]]; then
            log "Mudan√ßas detectadas: $OLD_HASH -> $NEW_HASH"
            echo "true" > $CHANGED_FILE
        else
            log "Nenhuma mudan√ßa detectada"
            echo "false" > $CHANGED_FILE
        fi
    fi
}

# Fun√ß√£o para fazer deploy
deploy_application() {
    cd "$APP_DIR"

	if [[ ! -f "$APP_DIR/docker-compose.yml" ]]; then
		log "ERROR" "Arquivo docker-compose.yml n√£o encontrado em $APP_DIR"
		exit 1
	fi

	# Verificar se houve mudan√ßas (ou for√ßar rebuild)
	CHANGED="true"
	if [[ -f "$CHANGED_FILE" ]] && [[ "$FORCE_REBUILD" != "true" ]]; then
		CHANGED=$(cat $CHANGED_FILE)
		# For√ßar deploy se n√£o houver containers rodando (primeira execu√ß√£o)
		if [[ -z "$(docker-compose -f $APP_DIR/docker-compose.yml ps -q)" ]]; then
			log "Nenhum container rodando, for√ßando deploy"			
			CHANGED="true"
		fi
	fi

    if [[ "$CHANGED" == "true" ]] || [[ "$FORCE_REBUILD" == "true" ]]; then
        log "Realizando deploy da aplica√ß√£o..."

        # Parar containers existentes
        log "Parando containers existentes..."
        docker-compose down --remove-orphans >/dev/null 2>&1 || true

        # Rebuild for√ßado (sempre reconstr√≥i imagens)
        log "Construindo imagens (rebuild for√ßado)..."
        docker-compose build --no-cache --pull

        # Subir aplica√ß√£o
        log "Iniciando aplica√ß√£o..."
        docker-compose up -d

        # Aguardar containers ficarem prontos
        sleep 15

        # Verificar se containers est√£o rodando
        if docker-compose ps | grep -q "Up"; then
            local server_ip=$(hostname -I | awk '{print $1}')
            log "‚úÖ DEPLOY REALIZADO COM SUCESSO!"
            log "üåê Aplica√ß√£o dispon√≠vel em: http://$server_ip:$WEB_PORT"
        else
            log "‚ùå ERRO: Containers n√£o iniciaram corretamente"
            docker-compose logs
            exit 1
        fi

        # Limpeza de imagens n√£o utilizadas
        log "Limpando imagens Docker n√£o utilizadas..."
        docker image prune -f >/dev/null 2>&1 || true

    else
        log "Nenhuma mudan√ßa detectada. Deploy n√£o necess√°rio."
    fi
}

# Execu√ß√£o principal
main() {
    log "Iniciando verifica√ß√£o de atualiza√ß√µes..."
    update_repository
    deploy_application
    log "=== DEPLOY FINALIZADO ==="
}

main "$@"
DEPLOY_SCRIPT_EOF

    chmod +x "$INSTALL_DIR/scripts/deploy.sh"
    log "SUCCESS" "Script de deploy criado em $INSTALL_DIR/scripts/deploy.sh"
}

# Configurar crontab
setup_crontab() {
    log "INFO" "Configurando execu√ß√£o autom√°tica (cron a cada 5 minutos)..."

    # Entrada do crontab
    local cron_entry="*/5 * * * * $INSTALL_DIR/scripts/deploy.sh >> $INSTALL_DIR/logs/cron.log 2>&1"

    # Verificar se j√° existe
    if crontab -l 2>/dev/null | grep -Fq "$INSTALL_DIR/scripts/deploy.sh"; then
        log "INFO" "Crontab j√° configurado"
    else
        # Adicionar entrada preservando crontab existente
        (crontab -l 2>/dev/null; echo "$cron_entry") | crontab -
        log "SUCCESS" "Crontab configurado - execu√ß√£o a cada 5 minutos"
    fi
}

# Executar primeiro deploy
run_initial_deploy() {
    log "INFO" "Executando primeiro deploy..."

    # Executar deploy inicial
    if "$INSTALL_DIR/scripts/deploy.sh"; then
        log "SUCCESS" "Deploy inicial executado com sucesso"
    else
        log "ERROR" "Falha no deploy inicial"
        exit 1
    fi
}

# Mostrar informa√ß√µes finais
show_summary() {
    local server_ip=$(hostname -I | awk '{print $1}')

    echo
    echo "=============================================="
    echo -e "${GREEN}üéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!${NC}"
    echo "=============================================="
    echo -e "${BLUE}üìç Diret√≥rio de instala√ß√£o:${NC} $INSTALL_DIR"
    echo -e "${BLUE}üåê URL da aplica√ß√£o:${NC} http://$server_ip:$WEB_PORT"
    echo -e "${BLUE}üìã Logs de deploy:${NC} $INSTALL_DIR/logs/"
    echo -e "${BLUE}‚è∞ Atualiza√ß√£o autom√°tica:${NC} A cada 5 minutos"
    echo -e "${BLUE}üì¶ Reposit√≥rio:${NC} $REPO_URL"
    echo "=============================================="
    echo
    echo -e "${YELLOW}Comandos √∫teis:${NC}"
    echo "  ‚Ä¢ Ver logs em tempo real: tail -f $INSTALL_DIR/logs/deploy.log"
    echo "  ‚Ä¢ Deploy manual: $INSTALL_DIR/scripts/deploy.sh"
    echo "  ‚Ä¢ Ver containers: cd $INSTALL_DIR/app && docker-compose ps"
    echo "  ‚Ä¢ Ver crontab: crontab -l"
    echo
}

# Fun√ß√£o principal
main() {
    log "INFO" "Iniciando instala√ß√£o do sistema de deploy automatizado..."
	# Limpar arquivo de mudan√ßas antes de iniciar
	CHANGED_DIR=$(dirname "$CHANGED_FILE")
	if [[ -d "$CHANGED_DIR" ]]; then
		rm -f "$CHANGED_FILE"
		log "Arquivo de mudan√ßas $CHANGED_FILE limpo"
	else
		log "WARN" "Diret√≥rio $CHANGED_DIR n√£o existe, pulando limpeza de $CHANGED_FILE"
	fi
    check_root
    install_system_dependencies
    verify_docker
    create_directory_structure
    create_config_file
    create_deploy_script
    setup_crontab
    run_initial_deploy
    show_summary

    log "SUCCESS" "Instala√ß√£o finalizada com sucesso!"
}

# Executar se chamado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
